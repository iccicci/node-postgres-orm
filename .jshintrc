{
	"bitwise" : true, // Prohibit bitwise operators (&, |, ^, etc.).
	"curly" : false, // Require {} for every new block or scope.
	"eqeqeq" : false, // Require triple equals i.e. `===`.
	"forin" : false, // Tolerate `for in` loops without `hasOwnPrototype`.
	"immed" : true, // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
	"latedef" : true, // Prohibit variable use before definition.
	"newcap" : true, // Require capitalization of all constructor functions e.g. `new F()`.
	"noarg" : true, // Prohibit use of `arguments.caller` and `arguments.callee`.
	"noempty" : true, // Prohibit use of empty blocks.
	"nonew" : true, // Prohibit use of constructors for side-effects.
	"plusplus" : false, // Prohibit use of `++` & `--`. //coding style related only
	"regexp" : true, // Prohibit `.` and `[^...]` in regular expressions.
	"undef" : true, // Require all non-global variables be declared before they are used.
	"strict" : true, // Require `use strict` pragma in every file.
	"trailing" : true, // Prohibit trailing whitespaces.

	"asi" : false, // Tolerate Automatic Semicolon Insertion (no semicolons).
	"boss" : false, // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
	"debug" : false, // Allow debugger statements e.g. browser breakpoints.
	"eqnull" : false, // Tolerate use of `== null`.
	"es5" : false, // Allow EcmaScript 5 syntax. // es5 is default https://github.com/jshint/jshint/issues/1411
	"esnext" : false, // Allow ES.next (ECMAScript 6) specific features such as `const` and `let`.
	"evil" : false, // Tolerate use of `eval`.
	"expr" : false, // Tolerate `ExpressionStatement` as Programs.
	"funcscope" : false, // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
	"globalstrict" : false, // Allow global "use strict" (also enables 'strict').
	"iterator" : false, // Allow usage of __iterator__ property.
	"lastsemic" : false, // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
	"laxbreak" : false, // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
	"laxcomma" : true, // Suppress warnings about comma-first coding style.
	"loopfunc" : false, // Allow functions to be defined within loops.
	"maxerr" : 100, // This options allows you to set the maximum amount of warnings JSHint will produce before giving up. Default is 50.
	"moz" : false, // This options tells JSHint that your code uses Mozilla JavaScript extensions. Unless you develop specifically for the Firefox web browser you don't need this option.
	"multistr" : false, // Tolerate multi-line strings.
	"onecase" : false, // Tolerate switches with just one case.
	"proto" : false, // Tolerate __proto__ property. This property is deprecated.
	"quotmark" : "double",
	"regexdash" : false, // Tolerate unescaped last dash i.e. `[-...]`.
	"scripturl" : false, // Tolerate script-targeted URLs.
	"smarttabs" : false, // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
	"shadow" : false, // Allows re-define variables later in code e.g. `var x=1; x=2;`.
	"sub" : false, // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
	"supernew" : false, // Tolerate `new function () { ... };` and `new Object;`.
	"validthis" : true, // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function.

	"browser" : false, // Standard browser globals e.g. `window`, `document`.
	"couch" : false, // Enable globals exposed by CouchDB.
	"devel" : false, // Allow development statements e.g. `console.log();`.
	"dojo" : false, // Enable globals exposed by Dojo Toolkit.
	"jquery" : false, // Enable globals exposed by jQuery JavaScript library.
	"mootools" : false, // Enable globals exposed by MooTools JavaScript framework.
	"node" : true, // Enable globals available when code is running inside of the NodeJS runtime environment.
	"nonstandard" : false, // Define non-standard but widely adopted globals such as escape and unescape.
	"phantom" : false, //?since version? This option defines globals available when your core is running inside of the PhantomJS runtime environment.
	"prototypejs" : false, // Enable globals exposed by Prototype JavaScript framework.
	"rhino" : false, // Enable globals available when your code is running inside of the Rhino runtime environment.
	"worker" : false, //?since version? This option defines globals available when your code is running inside of a Web Worker.
	"wsh" : false, // Enable globals available when your code is running as a script for the Windows Script Host.
	"yui" : false, //?since version? This option defines globals exposed by the YUI JavaScript framework.

	"nomen" : false, // Prohibit use of initial or trailing underbars in names.
	"onevar" : false, // Allow only one `var` statement per function.
	"passfail" : false, // Stop on first error.
	"white" : false // Check against strict whitespace and indentation rules.
}
